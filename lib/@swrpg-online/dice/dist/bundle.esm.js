const e="ADVANTAGE",s="THREAT",t="TRIUMPH",a="DESPAIR",r=[{description:"Recover one strain (may be applied more than once).",cost:{[e]:1,[t]:1}},{description:"Add a boost die to the next allied active character's check.",cost:{[e]:1,[t]:1}},{description:"Notice a single important point in the ongoing conflict, such as the location of a blast door's control panel or a weak point on an attack speeder.",cost:{[e]:1,[t]:1}},{description:"Inflict a Critical Injury with a successful attack that deals damage past soak (Advantage cost may vary).",cost:{[e]:1,[t]:1}},{description:"Activate a weapon quality (Advantage cost may vary).",cost:{[e]:1,[t]:1}},{description:"Perform an immediate free maneuver that does not exceed the two maneuver per turn limit.",cost:{[e]:2,[t]:1}},{description:"Add a setback die to the targeted character's next check.",cost:{[e]:2,[t]:1}},{description:"Add a boost die to any allied character's next check, including that of the active character.",cost:{[e]:2,[t]:1}},{description:"Negate the targeted enemy's defensive bonuses (such as the defense gained from cover, equipment, or performing the Guarded Stance maneuver) util the end of the current round.",cost:{[e]:3,[t]:1}},{description:"Ignore penalizing environmental effects such as inclement weather, zero gravity, or similar circumstances until the end of the active character's next turn.",cost:{[e]:3,[t]:1}},{description:"When dealing damage to a target, have the attack disable the opponent or one piece of gear rather than dealing wounds or strain. This could include hobbling them temporarily with a shot to the leg, or disabling their comlink. This should be agreed upon by the player and the GM, and the effects are up to the GM (although Table 6-10: Critical Injury Result is a god resource to consult for possible effects). The effects should be temporary and not too excessive.",cost:{[e]:3,[t]:1}},{description:"Gain + 1 melee or ranged defense until the end of the active character's next turn.",cost:{[e]:3,[t]:1}},{description:"Force the target to drop a melee or ranged weapon they are wielding.",cost:{[e]:3,[t]:1}},{description:"Upgrade the difficulty of the targeted character's next check.",cost:{[t]:1}},{description:"Do something vital, such as shooting the controls to the nearby blast doors to seal them shut.",cost:{[t]:1}},{description:"Upgrade any allied character's next check, including that of the current active character.",cost:{[t]:1}},{description:"When dealing damage to a target, have the attack destroy a piece of equipment the target is using, such as blowing up his blaster or destroying a personal shield generator.",cost:{[t]:2}},{description:"The active character suffers 1 strain.",cost:{[s]:1,[a]:1}},{description:"The active character loses the benefits of a prior maneuver (such as from taking cover or assuming a Guarded Stance) until they perform the maneuver again.",cost:{[s]:1,[a]:1}},{description:"An opponent may immediately perform one free maneuver in response to the active character's check.",cost:{[s]:2,[a]:1}},{description:"Add a boost die to the targeted character's next check.",cost:{[s]:1,[a]:1}},{description:"The active character or an allied character suffers a setback die on their next action.",cost:{[s]:2,[a]:1}},{description:"The active character falls prone.",cost:{[s]:3,[a]:1}},{description:"The active character grants the enemy a significant advantage in the ongoing encounter, such as accidentally blasting the controls to a bridge the active character was planning to use for their escape.",cost:{[s]:3,[a]:1}},{description:"The character's ranged weapon imediately runs out of ammunition and may not be used for the remainder of the encounter.",cost:{[a]:1}},{description:"Upgrade the difficulty of an allied character's next check, including that of the current active character.",cost:{[a]:1}},{description:"The tool or melee weapon the character is using becomes damaged.",cost:{[a]:1}}];const i=e=>Math.floor(Math.random()*e)+1,c=e=>{switch(e){case 3:return{successes:1,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 4:return{successes:1,failures:0,advantages:1,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 5:return{successes:0,failures:0,advantages:2,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 6:return{successes:0,failures:0,advantages:1,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};default:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0}}},d=e=>{switch(e){case 3:case 4:return{successes:0,failures:1,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 5:case 6:return{successes:0,failures:0,advantages:0,threats:1,triumphs:0,despair:0,lightSide:0,darkSide:0};default:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0}}},n=e=>{switch(e){case 2:case 3:return{successes:1,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 4:return{successes:2,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 5:case 6:return{successes:0,failures:0,advantages:1,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 7:return{successes:1,failures:0,advantages:1,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 8:return{successes:0,failures:0,advantages:2,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};default:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0}}},h=e=>{switch(e){case 2:return{successes:0,failures:1,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 3:return{successes:0,failures:2,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 4:case 5:case 6:return{successes:0,failures:0,advantages:0,threats:1,triumphs:0,despair:0,lightSide:0,darkSide:0};case 7:return{successes:0,failures:0,advantages:0,threats:2,triumphs:0,despair:0,lightSide:0,darkSide:0};case 8:return{successes:0,failures:1,advantages:0,threats:1,triumphs:0,despair:0,lightSide:0,darkSide:0};default:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0}}},u=e=>{switch(e){case 2:case 3:return{successes:1,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 4:case 5:return{successes:2,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 6:return{successes:0,failures:0,advantages:1,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 7:case 8:case 9:return{successes:1,failures:0,advantages:1,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 10:case 11:return{successes:0,failures:0,advantages:2,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 12:return{successes:0,failures:0,advantages:0,threats:0,triumphs:1,despair:0,lightSide:0,darkSide:0};default:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0}}},o=e=>{switch(e){case 2:case 3:return{successes:0,failures:1,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 4:case 5:return{successes:0,failures:2,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0};case 6:case 7:return{successes:0,failures:0,advantages:0,threats:1,triumphs:0,despair:0,lightSide:0,darkSide:0};case 8:case 9:return{successes:0,failures:1,advantages:0,threats:1,triumphs:0,despair:0,lightSide:0,darkSide:0};case 10:case 11:return{successes:0,failures:0,advantages:0,threats:2,triumphs:0,despair:0,lightSide:0,darkSide:0};case 12:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:1,lightSide:0,darkSide:0};default:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0}}},l=e=>{switch(e){case 1:case 2:case 3:case 4:case 5:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:1,darkSide:0};case 6:case 7:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:2,darkSide:0};case 8:case 9:case 10:case 11:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:1};case 12:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:2};default:return{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0}}},p=(e,s)=>{var t,a,p,g,f,m,v,S,k;const y=null!==(t=e.boostDice)&&void 0!==t?t:0,b=null!==(a=e.abilityDice)&&void 0!==a?a:0,x=null!==(p=e.proficiencyDice)&&void 0!==p?p:0,M=null!==(g=e.setBackDice)&&void 0!==g?g:0,w=null!==(f=e.difficultyDice)&&void 0!==f?f:0,D=null!==(m=e.challengeDice)&&void 0!==m?m:0,T=null!==(v=e.forceDice)&&void 0!==v?v:0,$=null!==(S=null==s?void 0:s.maxDicePerType)&&void 0!==S?S:100,A=null!==(k=null==s?void 0:s.maxTotalDice)&&void 0!==k?k:500,j=Math.max(0,Math.min(y,$)),E=Math.max(0,Math.min(b,$)),G=Math.max(0,Math.min(x,$)),I=Math.max(0,Math.min(M,$)),R=Math.max(0,Math.min(w,$)),C=Math.max(0,Math.min(D,$)),N=Math.max(0,Math.min(T,$)),O=y>$||b>$||x>$||M>$||w>$||D>$||T>$,P=j+E+G+I+R+C+N;if(P>A)throw new Error(`Total dice count (${P}) exceeds maximum allowed (${A}). Please reduce the number of dice in your pool.`);if(O&&(null==s?void 0:s.throwOnLimitExceeded)){const e=[];throw y>$&&e.push(`boost: ${y}`),b>$&&e.push(`ability: ${b}`),x>$&&e.push(`proficiency: ${x}`),M>$&&e.push(`setback: ${M}`),w>$&&e.push(`difficulty: ${w}`),D>$&&e.push(`challenge: ${D}`),T>$&&e.push(`force: ${T}`),new Error(`Dice counts exceed per-type limit (${$}): ${e.join(", ")}. Dice counts have been capped to the maximum.`)}const U=[];for(let e=0;e<j;e++){const e=i(6);U.push({type:"boost",roll:e,result:c(e)})}for(let e=0;e<E;e++){const e=i(8);U.push({type:"ability",roll:e,result:n(e)})}for(let e=0;e<G;e++){const e=i(12);U.push({type:"proficiency",roll:e,result:u(e)})}for(let e=0;e<I;e++){const e=i(6);U.push({type:"setback",roll:e,result:d(e)})}for(let e=0;e<R;e++){const e=i(8);U.push({type:"difficulty",roll:e,result:h(e)})}for(let e=0;e<C;e++){const e=i(12);U.push({type:"challenge",roll:e,result:o(e)})}for(let e=0;e<N;e++){const e=i(12);U.push({type:"force",roll:e,result:l(e)})}const q=(e=>{const s=e.reduce((e,s)=>({successes:e.successes+s.successes,failures:e.failures+s.failures,advantages:e.advantages+s.advantages,threats:e.threats+s.threats,triumphs:e.triumphs+s.triumphs,despair:e.despair+s.despair,lightSide:e.lightSide+(s.lightSide||0),darkSide:e.darkSide+(s.darkSide||0)}),{successes:0,failures:0,advantages:0,threats:0,triumphs:0,despair:0,lightSide:0,darkSide:0});let t=0,a=0;return s.successes===s.failures?(t=0,a=0):s.successes>s.failures?t=s.successes-s.failures:a=s.failures-s.successes,{successes:t,failures:a,advantages:s.advantages,threats:s.threats,triumphs:s.triumphs,despair:s.despair,lightSide:s.lightSide,darkSide:s.darkSide}})(U.map(e=>e.result));if(null==s?void 0:s.hints){const e=r.filter(e=>{const{cost:s}=e;return Object.entries(s).some(([e,s])=>{const t=e.toLowerCase()+"s",a=q[t];return"number"==typeof a&&(void 0!==s&&s>0&&a>=s)})});q.hints=e.map(e=>`${function(e){if(!e.cost||0===Object.keys(e.cost).length)return"No cost";const s=Object.entries(e.cost).filter(([e,s])=>s&&s>0).map(([e,s])=>`${s} ${e.charAt(0).toUpperCase()+e.toLowerCase().slice(1)}${s>1?"s":""}`);return s.length>1?s.join(" OR "):s.length>0?s[0]:"No cost"}(e)} - ${e.description}`)}return{results:U,summary:q}},g=(e,s)=>({abilityDice:Math.max(0,e),proficiencyDice:Math.max(0,s)}),f=(e,s,t=0)=>({abilityDice:Math.max(0,e),proficiencyDice:Math.max(0,s),boostDice:Math.max(0,t)}),m=(e,s,t,a=0)=>({abilityDice:Math.max(0,e),proficiencyDice:Math.max(0,s),difficultyDice:Math.max(0,t),challengeDice:Math.max(0,a)}),v=(e,s=0)=>({difficultyDice:Math.max(0,e),challengeDice:Math.max(0,s)});export{f as createCombatCheck,v as createDifficultyPool,m as createOpposedCheck,g as createSkillCheck,p as roll};
//# sourceMappingURL=bundle.esm.js.map
