{"version":3,"file":"bundle.umd.js","sources":["../src/types.ts","../src/hints.ts","../src/dice.ts","../src/pools.ts"],"sourcesContent":["export type DicePool = {\n  boostDice?: number;\n  abilityDice?: number;\n  proficiencyDice?: number;\n  setBackDice?: number;\n  difficultyDice?: number;\n  challengeDice?: number;\n  forceDice?: number;\n};\n\nexport type DiceResult = {\n  successes: number;\n  failures: number;\n  advantages: number;\n  threats: number;\n  triumphs: number;\n  despair: number;\n  lightSide: number;\n  darkSide: number;\n  hints?: string[];\n};\n\nexport type DieType =\n  | \"boost\"\n  | \"ability\"\n  | \"proficiency\"\n  | \"setback\"\n  | \"difficulty\"\n  | \"challenge\"\n  | \"force\";\n\nexport type DetailedDieResult = {\n  type: DieType;\n  roll: number;\n  result: DiceResult;\n};\n\nexport type RollResult = {\n  results: DetailedDieResult[];\n  summary: DiceResult;\n};\n\nexport const SYMBOLS = {\n  SUCCESS: \"SUCCESS\" as const,\n  FAILURE: \"FAILURE\" as const,\n  ADVANTAGE: \"ADVANTAGE\" as const,\n  THREAT: \"THREAT\" as const,\n  TRIUMPH: \"TRIUMPH\" as const,\n  DESPAIR: \"DESPAIR\" as const,\n  LIGHT: \"LIGHT\" as const,\n  DARK: \"DARK\" as const,\n} as const;\n\nexport type Symbol = keyof typeof SYMBOLS;\n\nexport type RollOptions = {\n  hints?: boolean;\n  /**\n   * Maximum number of dice allowed per die type.\n   * Default: 100\n   */\n  maxDicePerType?: number;\n  /**\n   * Maximum total number of dice allowed in a single roll.\n   * Default: 500\n   */\n  maxTotalDice?: number;\n  /**\n   * Whether to throw an error when dice limits are exceeded.\n   * If false, dice counts will be silently capped to the maximum.\n   * Default: false\n   */\n  throwOnLimitExceeded?: boolean;\n};\n","import { SYMBOLS, type Symbol } from \"./types\";\n\n// 1 advantage or 1 triumph\nconst recoverOneStrain = \"Recover one strain (may be applied more than once).\";\nconst addBoostDieToActiveAlly =\n  \"Add a boost die to the next allied active character's check.\";\nconst noticeImportantPoint =\n  \"Notice a single important point in the ongoing conflict, such as the location of a blast door's control panel or a weak point on an attack speeder.\";\nconst inflictCriticalInjury =\n  \"Inflict a Critical Injury with a successful attack that deals damage past soak (Advantage cost may vary).\";\nconst activateWeaponQuality =\n  \"Activate a weapon quality (Advantage cost may vary).\";\n\n// 2 advantage or 1 triumph\nconst performManeuver =\n  \"Perform an immediate free maneuver that does not exceed the two maneuver per turn limit.\";\nconst addSetbackDie =\n  \"Add a setback die to the targeted character's next check.\";\nconst addBoostDieToAnyAlly =\n  \"Add a boost die to any allied character's next check, including that of the active character.\";\n\n// 3 advantage or 1 triumph\nconst negateEnemy =\n  \"Negate the targeted enemy's defensive bonuses (such as the defense gained from cover, equipment, or performing the Guarded Stance maneuver) util the end of the current round.\";\nconst ignoreEnvironment =\n  \"Ignore penalizing environmental effects such as inclement weather, zero gravity, or similar circumstances until the end of the active character's next turn.\";\nconst disableOpponent =\n  \"When dealing damage to a target, have the attack disable the opponent or one piece of gear rather than dealing wounds or strain. This could include hobbling them temporarily with a shot to the leg, or disabling their comlink. This should be agreed upon by the player and the GM, and the effects are up to the GM (although Table 6-10: Critical Injury Result is a god resource to consult for possible effects). The effects should be temporary and not too excessive.\";\nconst gainDefense =\n  \"Gain + 1 melee or ranged defense until the end of the active character's next turn.\";\nconst dropWeapon =\n  \"Force the target to drop a melee or ranged weapon they are wielding.\";\n\n// 1 triumph\nconst upgradeDifficultyTargetedCharacter =\n  \"Upgrade the difficulty of the targeted character's next check.\";\nconst doSomethingVital =\n  \"Do something vital, such as shooting the controls to the nearby blast doors to seal them shut.\";\nconst upgradeAnyAllyCheck =\n  \"Upgrade any allied character's next check, including that of the current active character.\";\n\n// 2 triumph\nconst destroyEquipment =\n  \"When dealing damage to a target, have the attack destroy a piece of equipment the target is using, such as blowing up his blaster or destroying a personal shield generator.\";\n\n// 1 threat or 1 despair\nconst sufferStrain = \"The active character suffers 1 strain.\";\nconst loseManeuverBenefit =\n  \"The active character loses the benefits of a prior maneuver (such as from taking cover or assuming a Guarded Stance) until they perform the maneuver again.\";\n\n// 2 threat or 1 despair\nconst freeManeuver =\n  \"An opponent may immediately perform one free maneuver in response to the active character's check.\";\nconst addBoostDieToTargetedCharacter =\n  \"Add a boost die to the targeted character's next check.\";\nconst sufferSetback =\n  \"The active character or an allied character suffers a setback die on their next action.\";\n\n// 3 threat or 1 despair\nconst fallProne = \"The active character falls prone.\";\nconst gainSignificantAdvantage =\n  \"The active character grants the enemy a significant advantage in the ongoing encounter, such as accidentally blasting the controls to a bridge the active character was planning to use for their escape.\";\n\n// 1 despair\nconst outOfAmmo =\n  \"The character's ranged weapon imediately runs out of ammunition and may not be used for the remainder of the encounter.\";\nconst upgradeDifficultyAlliedCharacter =\n  \"Upgrade the difficulty of an allied character's next check, including that of the current active character.\";\nconst damagedItem =\n  \"The tool or melee weapon the character is using becomes damaged.\";\n\nexport type CostType = {\n  [key in Symbol]?: number;\n};\n\ntype Hint = {\n  description: string;\n  cost: CostType;\n};\n\nexport const hints: Hint[] = [\n  // 1 advantage or 1 triumph\n  {\n    description: recoverOneStrain,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: addBoostDieToActiveAlly,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: noticeImportantPoint,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: inflictCriticalInjury,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: activateWeaponQuality,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  // 2 advantage or 1 triumph\n  {\n    description: performManeuver,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 2,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: addSetbackDie,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 2,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: addBoostDieToAnyAlly,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 2,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  // 3 advantage or 1 triumph\n  {\n    description: negateEnemy,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: ignoreEnvironment,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: disableOpponent,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: gainDefense,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: dropWeapon,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  // 1 triumph\n  {\n    description: upgradeDifficultyTargetedCharacter,\n    cost: {\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: doSomethingVital,\n    cost: {\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: upgradeAnyAllyCheck,\n    cost: {\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  // 2 triumph\n  {\n    description: destroyEquipment,\n    cost: {\n      [SYMBOLS.TRIUMPH]: 2,\n    },\n  },\n  // 1 threat or 1 despair\n  {\n    description: sufferStrain,\n    cost: {\n      [SYMBOLS.THREAT]: 1,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: loseManeuverBenefit,\n    cost: {\n      [SYMBOLS.THREAT]: 1,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  // 2 threat or 1 despair\n  {\n    description: freeManeuver,\n    cost: {\n      [SYMBOLS.THREAT]: 2,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: addBoostDieToTargetedCharacter,\n    cost: {\n      [SYMBOLS.THREAT]: 1,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: sufferSetback,\n    cost: {\n      [SYMBOLS.THREAT]: 2,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  // 3 threat or 1 despair\n  {\n    description: fallProne,\n    cost: {\n      [SYMBOLS.THREAT]: 3,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: gainSignificantAdvantage,\n    cost: {\n      [SYMBOLS.THREAT]: 3,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  // 1 despair\n  {\n    description: outOfAmmo,\n    cost: {\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: upgradeDifficultyAlliedCharacter,\n    cost: {\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: damagedItem,\n    cost: {\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n];\n\nexport function hintCostDisplayText(hint: Hint): string {\n  if (!hint.cost || Object.keys(hint.cost).length === 0) {\n    return \"No cost\";\n  }\n  const parts = Object.entries(hint.cost)\n    .filter(([_, count]) => count && count > 0)\n    .map(([symbol, count]) => {\n      const symbolName =\n        symbol.charAt(0).toUpperCase() + symbol.toLowerCase().slice(1);\n      const plural = count > 1 ? \"s\" : \"\";\n      return `${count} ${symbolName}${plural}`;\n    });\n\n  // Use \"OR\" in uppercase for clarity when multiple options exist\n  if (parts.length > 1) {\n    return parts.join(\" OR \");\n  }\n  return parts.length > 0 ? parts[0] : \"No cost\";\n}\n","import { hintCostDisplayText, hints } from \"./hints\";\nimport {\n  DicePool,\n  RollResult,\n  DiceResult,\n  DetailedDieResult,\n  RollOptions,\n} from \"./types\";\n\n// Default dice limits for performance and security\nexport const DEFAULT_MAX_DICE_PER_TYPE = 100;\nexport const DEFAULT_MAX_TOTAL_DICE = 500;\n\nconst rollDie = (sides: number): number =>\n  Math.floor(Math.random() * sides) + 1;\n\nconst boostDieResult = (roll: number): DiceResult => {\n  switch (roll) {\n    case 3:\n      return {\n        successes: 1,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 4:\n      return {\n        successes: 1,\n        failures: 0,\n        advantages: 1,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 5:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 2,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 6:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 1,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    default:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n  }\n};\n\nconst setBackDieResult = (roll: number): DiceResult => {\n  switch (roll) {\n    case 3:\n    case 4:\n      return {\n        successes: 0,\n        failures: 1,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 5:\n    case 6:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 1,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    default:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n  }\n};\n\nconst abilityDieResult = (roll: number): DiceResult => {\n  switch (roll) {\n    case 2:\n    case 3:\n      return {\n        successes: 1,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 4:\n      return {\n        successes: 2,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 5:\n    case 6:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 1,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 7:\n      return {\n        successes: 1,\n        failures: 0,\n        advantages: 1,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 8:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 2,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    default:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n  }\n};\n\nconst difficultyDieResult = (roll: number): DiceResult => {\n  switch (roll) {\n    case 2:\n      return {\n        successes: 0,\n        failures: 1,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 3:\n      return {\n        successes: 0,\n        failures: 2,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 4:\n    case 5:\n    case 6:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 1,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 7:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 2,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 8:\n      return {\n        successes: 0,\n        failures: 1,\n        advantages: 0,\n        threats: 1,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    default:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n  }\n};\n\nconst proficiencyDieResult = (roll: number): DiceResult => {\n  switch (roll) {\n    case 2:\n    case 3:\n      return {\n        successes: 1,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 4:\n    case 5:\n      return {\n        successes: 2,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 6:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 1,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 7:\n    case 8:\n    case 9:\n      return {\n        successes: 1,\n        failures: 0,\n        advantages: 1,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 10:\n    case 11:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 2,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 12:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 1,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    default:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n  }\n};\n\nconst challengeDieResult = (roll: number): DiceResult => {\n  switch (roll) {\n    case 2:\n    case 3:\n      return {\n        successes: 0,\n        failures: 1,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 4:\n    case 5:\n      return {\n        successes: 0,\n        failures: 2,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 6:\n    case 7:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 1,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 8:\n    case 9:\n      return {\n        successes: 0,\n        failures: 1,\n        advantages: 0,\n        threats: 1,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 10:\n    case 11:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 2,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    case 12:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 1,\n        lightSide: 0,\n        darkSide: 0,\n      };\n    default:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n  }\n};\n\nconst forceDieResult = (roll: number): DiceResult => {\n  switch (roll) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 1,\n        darkSide: 0,\n      };\n    case 6:\n    case 7:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 2,\n        darkSide: 0,\n      };\n    case 8:\n    case 9:\n    case 10:\n    case 11:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 1,\n      };\n    case 12:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 2,\n      };\n    default:\n      return {\n        successes: 0,\n        failures: 0,\n        advantages: 0,\n        threats: 0,\n        triumphs: 0,\n        despair: 0,\n        lightSide: 0,\n        darkSide: 0,\n      };\n  }\n};\n\nconst sumResults = (\n  results: DiceResult[],\n  options?: RollOptions,\n): DiceResult => {\n  const sums = results.reduce(\n    (acc, curr) => ({\n      successes: acc.successes + curr.successes,\n      failures: acc.failures + curr.failures,\n      advantages: acc.advantages + curr.advantages,\n      threats: acc.threats + curr.threats,\n      triumphs: acc.triumphs + curr.triumphs,\n      despair: acc.despair + curr.despair,\n      lightSide: acc.lightSide + (curr.lightSide || 0),\n      darkSide: acc.darkSide + (curr.darkSide || 0),\n    }),\n    {\n      successes: 0,\n      failures: 0,\n      advantages: 0,\n      threats: 0,\n      triumphs: 0,\n      despair: 0,\n      lightSide: 0,\n      darkSide: 0,\n    },\n  );\n\n  let netSuccesses = 0;\n  let netFailures = 0;\n\n  if (sums.successes === sums.failures) {\n    netSuccesses = 0;\n    netFailures = 0;\n  } else if (sums.successes > sums.failures) {\n    netSuccesses = sums.successes - sums.failures;\n  } else {\n    netFailures = sums.failures - sums.successes;\n  }\n\n  const result: DiceResult = {\n    successes: netSuccesses,\n    failures: netFailures,\n    advantages: sums.advantages,\n    threats: sums.threats,\n    triumphs: sums.triumphs,\n    despair: sums.despair,\n    lightSide: sums.lightSide,\n    darkSide: sums.darkSide,\n  };\n\n  return result;\n};\n\n/**\n * Rolls a dice pool and returns the results.\n *\n * @param pool - The dice pool to roll\n * @param options - Optional roll configuration including dice limits\n * @returns The roll results with detailed die information and summary\n * @throws {Error} If dice counts exceed configured limits\n *\n * Default limits:\n * - Max dice per type: 100 (configurable via options.maxDicePerType)\n * - Max total dice: 500 (configurable via options.maxTotalDice)\n */\nexport const roll = (pool: DicePool, options?: RollOptions): RollResult => {\n  const boostCount = pool.boostDice ?? 0;\n  const abilityCount = pool.abilityDice ?? 0;\n  const proficiencyCount = pool.proficiencyDice ?? 0;\n  const setBackCount = pool.setBackDice ?? 0;\n  const difficultyCount = pool.difficultyDice ?? 0;\n  const challengeCount = pool.challengeDice ?? 0;\n  const forceCount = pool.forceDice ?? 0;\n\n  // Get limits from options or use defaults\n  const maxDicePerType = options?.maxDicePerType ?? DEFAULT_MAX_DICE_PER_TYPE;\n  const maxTotalDice = options?.maxTotalDice ?? DEFAULT_MAX_TOTAL_DICE;\n\n  // Ensure all dice counts are non-negative and apply per-type limits\n  const sanitizedPool = {\n    boostDice: Math.max(0, Math.min(boostCount, maxDicePerType)),\n    abilityDice: Math.max(0, Math.min(abilityCount, maxDicePerType)),\n    proficiencyDice: Math.max(0, Math.min(proficiencyCount, maxDicePerType)),\n    setBackDice: Math.max(0, Math.min(setBackCount, maxDicePerType)),\n    difficultyDice: Math.max(0, Math.min(difficultyCount, maxDicePerType)),\n    challengeDice: Math.max(0, Math.min(challengeCount, maxDicePerType)),\n    forceDice: Math.max(0, Math.min(forceCount, maxDicePerType)),\n  };\n\n  // Check if any dice counts exceeded the per-type limit\n  const exceedsPerTypeLimit =\n    boostCount > maxDicePerType ||\n    abilityCount > maxDicePerType ||\n    proficiencyCount > maxDicePerType ||\n    setBackCount > maxDicePerType ||\n    difficultyCount > maxDicePerType ||\n    challengeCount > maxDicePerType ||\n    forceCount > maxDicePerType;\n\n  // Calculate total dice count\n  const totalDice =\n    sanitizedPool.boostDice +\n    sanitizedPool.abilityDice +\n    sanitizedPool.proficiencyDice +\n    sanitizedPool.setBackDice +\n    sanitizedPool.difficultyDice +\n    sanitizedPool.challengeDice +\n    sanitizedPool.forceDice;\n\n  // Check total dice limit\n  if (totalDice > maxTotalDice) {\n    throw new Error(\n      `Total dice count (${totalDice}) exceeds maximum allowed (${maxTotalDice}). ` +\n        `Please reduce the number of dice in your pool.`,\n    );\n  }\n\n  // Warn if per-type limits were exceeded (but continue with capped values)\n  if (exceedsPerTypeLimit && options?.throwOnLimitExceeded) {\n    const exceeded = [];\n    if (boostCount > maxDicePerType) exceeded.push(`boost: ${boostCount}`);\n    if (abilityCount > maxDicePerType)\n      exceeded.push(`ability: ${abilityCount}`);\n    if (proficiencyCount > maxDicePerType)\n      exceeded.push(`proficiency: ${proficiencyCount}`);\n    if (setBackCount > maxDicePerType)\n      exceeded.push(`setback: ${setBackCount}`);\n    if (difficultyCount > maxDicePerType)\n      exceeded.push(`difficulty: ${difficultyCount}`);\n    if (challengeCount > maxDicePerType)\n      exceeded.push(`challenge: ${challengeCount}`);\n    if (forceCount > maxDicePerType) exceeded.push(`force: ${forceCount}`);\n\n    throw new Error(\n      `Dice counts exceed per-type limit (${maxDicePerType}): ${exceeded.join(\", \")}. ` +\n        `Dice counts have been capped to the maximum.`,\n    );\n  }\n\n  const detailedResults: DetailedDieResult[] = [];\n\n  // Roll boost dice\n  for (let i = 0; i < sanitizedPool.boostDice; i++) {\n    const roll = rollDie(6);\n    detailedResults.push({\n      type: \"boost\",\n      roll,\n      result: boostDieResult(roll),\n    });\n  }\n\n  // Roll ability dice\n  for (let i = 0; i < sanitizedPool.abilityDice; i++) {\n    const roll = rollDie(8);\n    detailedResults.push({\n      type: \"ability\",\n      roll,\n      result: abilityDieResult(roll),\n    });\n  }\n\n  // Roll proficiency dice\n  for (let i = 0; i < sanitizedPool.proficiencyDice; i++) {\n    const roll = rollDie(12);\n    detailedResults.push({\n      type: \"proficiency\",\n      roll,\n      result: proficiencyDieResult(roll),\n    });\n  }\n\n  // Roll setback dice\n  for (let i = 0; i < sanitizedPool.setBackDice; i++) {\n    const roll = rollDie(6);\n    detailedResults.push({\n      type: \"setback\",\n      roll,\n      result: setBackDieResult(roll),\n    });\n  }\n\n  // Roll difficulty dice\n  for (let i = 0; i < sanitizedPool.difficultyDice; i++) {\n    const roll = rollDie(8);\n    detailedResults.push({\n      type: \"difficulty\",\n      roll,\n      result: difficultyDieResult(roll),\n    });\n  }\n\n  // Roll challenge dice\n  for (let i = 0; i < sanitizedPool.challengeDice; i++) {\n    const roll = rollDie(12);\n    detailedResults.push({\n      type: \"challenge\",\n      roll,\n      result: challengeDieResult(roll),\n    });\n  }\n\n  // Roll force dice\n  for (let i = 0; i < sanitizedPool.forceDice; i++) {\n    const roll = rollDie(12);\n    detailedResults.push({\n      type: \"force\",\n      roll,\n      result: forceDieResult(roll),\n    });\n  }\n\n  const summary = sumResults(detailedResults.map((r) => r.result));\n\n  if (options?.hints) {\n    const applicableHints = hints.filter((hint) => {\n      const { cost } = hint;\n      // For OR conditions: at least one option must be fully satisfied\n      // Each entry in cost represents an alternative way to pay for the hint\n      return Object.entries(cost).some(([symbol, required]) => {\n        const summaryKey = (symbol.toLowerCase() + \"s\") as keyof typeof summary;\n        const value = summary[summaryKey];\n        if (typeof value !== \"number\") return false;\n        // Check if we have enough of this symbol type to afford the hint\n        return required !== undefined && required > 0 && value >= required;\n      });\n    });\n    summary.hints = applicableHints.map(\n      (hint) => `${hintCostDisplayText(hint)} - ${hint.description}`,\n    );\n  }\n\n  return {\n    results: detailedResults,\n    summary: summary,\n  };\n};\n","import { DicePool } from \"./types\";\n\n/**\n * Creates a basic skill check dice pool\n * @param ability Number of ability (green) dice\n * @param proficiency Number of proficiency (yellow) dice\n * @returns DicePool configured for a basic skill check\n */\nexport const createSkillCheck = (\n  ability: number,\n  proficiency: number,\n): DicePool => ({\n  abilityDice: Math.max(0, ability),\n  proficiencyDice: Math.max(0, proficiency),\n});\n\n/**\n * Creates a combat check dice pool with optional boost die\n * @param ability Number of ability (green) dice\n * @param proficiency Number of proficiency (yellow) dice\n * @param boost Number of boost (blue) dice\n * @returns DicePool configured for a combat check\n */\nexport const createCombatCheck = (\n  ability: number,\n  proficiency: number,\n  boost: number = 0,\n): DicePool => ({\n  abilityDice: Math.max(0, ability),\n  proficiencyDice: Math.max(0, proficiency),\n  boostDice: Math.max(0, boost),\n});\n\n/**\n * Creates an opposed check dice pool\n * @param ability Number of ability (green) dice\n * @param proficiency Number of proficiency (yellow) dice\n * @param difficulty Number of difficulty (purple) dice\n * @param challenge Number of challenge (red) dice\n * @returns DicePool configured for an opposed check\n */\nexport const createOpposedCheck = (\n  ability: number,\n  proficiency: number,\n  difficulty: number,\n  challenge: number = 0,\n): DicePool => ({\n  abilityDice: Math.max(0, ability),\n  proficiencyDice: Math.max(0, proficiency),\n  difficultyDice: Math.max(0, difficulty),\n  challengeDice: Math.max(0, challenge),\n});\n\n/**\n * Creates a difficulty check dice pool\n * @param difficulty Number of difficulty (purple) dice\n * @param challenge Number of challenge (red) dice\n * @returns DicePool configured for a pure difficulty check\n */\nexport const createDifficultyPool = (\n  difficulty: number,\n  challenge: number = 0,\n): DicePool => ({\n  difficultyDice: Math.max(0, difficulty),\n  challengeDice: Math.max(0, challenge),\n});\n"],"names":["SYMBOLS","hints","description","cost","SYMBOLS_ADVANTAGE","SYMBOLS_TRIUMPH","SYMBOLS_THREAT","SYMBOLS_DESPAIR","rollDie","sides","Math","floor","random","boostDieResult","roll","successes","failures","advantages","threats","triumphs","despair","lightSide","darkSide","setBackDieResult","abilityDieResult","difficultyDieResult","proficiencyDieResult","challengeDieResult","forceDieResult","ability","proficiency","boost","abilityDice","max","proficiencyDice","boostDice","difficulty","challenge","difficultyDice","challengeDice","pool","options","boostCount","_a","abilityCount","_b","proficiencyCount","_c","setBackCount","_d","setBackDice","difficultyCount","_e","challengeCount","_f","forceCount","_g","forceDice","maxDicePerType","_h","maxTotalDice","_j","sanitizedPool","min","exceedsPerTypeLimit","totalDice","Error","throwOnLimitExceeded","exceeded","push","join","detailedResults","i","type","result","summary","results","sums","reduce","acc","curr","netSuccesses","netFailures","sumResults","map","r","applicableHints","filter","hint","Object","entries","some","symbol","required","summaryKey","toLowerCase","value","undefined","keys","length","parts","_","count","charAt","toUpperCase","slice","hintCostDisplayText"],"mappings":"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"}